"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var observable_1 = require("data/observable");
var platformModule = require("tns-core-modules/platform");
var HelloWorldModel = (function (_super) {
    __extends(HelloWorldModel, _super);
    function HelloWorldModel() {
        var _this = _super.call(this) || this;
        //Create my deviceInfo array
        var deviceInfo = [];
        //Populate it with device data
        deviceInfo.push({ key: "Model", val: platformModule.device.model });
        deviceInfo.push({ key: "Type", val: platformModule.device.deviceType });
        deviceInfo.push({ key: "Operating System", val: platformModule.device.os });
        deviceInfo.push({ key: "OS Version", val: platformModule.device.osVersion });
        deviceInfo.push({ key: "SDK version", val: platformModule.device.sdkVersion });
        deviceInfo.push({ key: "Screen: Width", val: platformModule.screen.mainScreen.widthPixels });
        deviceInfo.push({ key: "Screen: height", val: platformModule.screen.mainScreen.heightPixels });
        deviceInfo.push({ key: "Screen: Scale", val: platformModule.screen.mainScreen.scale });
        //Assign the deviceinfo data to the observable
        _this.set('deviceInfo', deviceInfo);
        return _this;
    }
    return HelloWorldModel;
}(observable_1.Observable));
exports.HelloWorldModel = HelloWorldModel;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi12aWV3LW1vZGVsLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsibWFpbi12aWV3LW1vZGVsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsOENBQTZDO0FBQzdDLDBEQUE0RDtBQUU1RDtJQUFxQyxtQ0FBVTtJQUUzQztRQUFBLFlBQ0ksaUJBQU8sU0FjVjtRQWJHLDRCQUE0QjtRQUM1QixJQUFJLFVBQVUsR0FBUSxFQUFFLENBQUM7UUFDekIsOEJBQThCO1FBQzlCLFVBQVUsQ0FBQyxJQUFJLENBQUMsRUFBRSxHQUFHLEVBQUUsT0FBTyxFQUFFLEdBQUcsRUFBRSxjQUFjLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUM7UUFDcEUsVUFBVSxDQUFDLElBQUksQ0FBQyxFQUFFLEdBQUcsRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLGNBQWMsQ0FBQyxNQUFNLENBQUMsVUFBVSxFQUFFLENBQUMsQ0FBQztRQUN4RSxVQUFVLENBQUMsSUFBSSxDQUFDLEVBQUUsR0FBRyxFQUFFLGtCQUFrQixFQUFFLEdBQUcsRUFBRSxjQUFjLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDNUUsVUFBVSxDQUFDLElBQUksQ0FBQyxFQUFFLEdBQUcsRUFBRSxZQUFZLEVBQUUsR0FBRyxFQUFFLGNBQWMsQ0FBQyxNQUFNLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUM3RSxVQUFVLENBQUMsSUFBSSxDQUFDLEVBQUUsR0FBRyxFQUFFLGFBQWEsRUFBRSxHQUFHLEVBQUUsY0FBYyxDQUFDLE1BQU0sQ0FBQyxVQUFVLEVBQUUsQ0FBQyxDQUFDO1FBQy9FLFVBQVUsQ0FBQyxJQUFJLENBQUMsRUFBRSxHQUFHLEVBQUUsZUFBZSxFQUFFLEdBQUcsRUFBRSxjQUFjLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDO1FBQzdGLFVBQVUsQ0FBQyxJQUFJLENBQUMsRUFBRSxHQUFHLEVBQUUsZ0JBQWdCLEVBQUUsR0FBRyxFQUFFLGNBQWMsQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLFlBQVksRUFBRSxDQUFDLENBQUM7UUFDL0YsVUFBVSxDQUFDLElBQUksQ0FBQyxFQUFFLEdBQUcsRUFBRSxlQUFlLEVBQUUsR0FBRyxFQUFFLGNBQWMsQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUM7UUFDdkYsOENBQThDO1FBQzlDLEtBQUksQ0FBQyxHQUFHLENBQUMsWUFBWSxFQUFFLFVBQVUsQ0FBQyxDQUFDOztJQUN2QyxDQUFDO0lBRUwsc0JBQUM7QUFBRCxDQUFDLEFBbkJELENBQXFDLHVCQUFVLEdBbUI5QztBQW5CWSwwQ0FBZSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdkYXRhL29ic2VydmFibGUnO1xuaW1wb3J0ICogYXMgcGxhdGZvcm1Nb2R1bGUgZnJvbSBcInRucy1jb3JlLW1vZHVsZXMvcGxhdGZvcm1cIjtcblxuZXhwb3J0IGNsYXNzIEhlbGxvV29ybGRNb2RlbCBleHRlbmRzIE9ic2VydmFibGUge1xuXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIC8vQ3JlYXRlIG15IGRldmljZUluZm8gYXJyYXlcbiAgICAgICAgdmFyIGRldmljZUluZm86IGFueSA9IFtdO1xuICAgICAgICAvL1BvcHVsYXRlIGl0IHdpdGggZGV2aWNlIGRhdGFcbiAgICAgICAgZGV2aWNlSW5mby5wdXNoKHsga2V5OiBcIk1vZGVsXCIsIHZhbDogcGxhdGZvcm1Nb2R1bGUuZGV2aWNlLm1vZGVsIH0pO1xuICAgICAgICBkZXZpY2VJbmZvLnB1c2goeyBrZXk6IFwiVHlwZVwiLCB2YWw6IHBsYXRmb3JtTW9kdWxlLmRldmljZS5kZXZpY2VUeXBlIH0pO1xuICAgICAgICBkZXZpY2VJbmZvLnB1c2goeyBrZXk6IFwiT3BlcmF0aW5nIFN5c3RlbVwiLCB2YWw6IHBsYXRmb3JtTW9kdWxlLmRldmljZS5vcyB9KTtcbiAgICAgICAgZGV2aWNlSW5mby5wdXNoKHsga2V5OiBcIk9TIFZlcnNpb25cIiwgdmFsOiBwbGF0Zm9ybU1vZHVsZS5kZXZpY2Uub3NWZXJzaW9uIH0pO1xuICAgICAgICBkZXZpY2VJbmZvLnB1c2goeyBrZXk6IFwiU0RLIHZlcnNpb25cIiwgdmFsOiBwbGF0Zm9ybU1vZHVsZS5kZXZpY2Uuc2RrVmVyc2lvbiB9KTtcbiAgICAgICAgZGV2aWNlSW5mby5wdXNoKHsga2V5OiBcIlNjcmVlbjogV2lkdGhcIiwgdmFsOiBwbGF0Zm9ybU1vZHVsZS5zY3JlZW4ubWFpblNjcmVlbi53aWR0aFBpeGVscyB9KTtcbiAgICAgICAgZGV2aWNlSW5mby5wdXNoKHsga2V5OiBcIlNjcmVlbjogaGVpZ2h0XCIsIHZhbDogcGxhdGZvcm1Nb2R1bGUuc2NyZWVuLm1haW5TY3JlZW4uaGVpZ2h0UGl4ZWxzIH0pO1xuICAgICAgICBkZXZpY2VJbmZvLnB1c2goeyBrZXk6IFwiU2NyZWVuOiBTY2FsZVwiLCB2YWw6IHBsYXRmb3JtTW9kdWxlLnNjcmVlbi5tYWluU2NyZWVuLnNjYWxlIH0pO1xuICAgICAgICAvL0Fzc2lnbiB0aGUgZGV2aWNlaW5mbyBkYXRhIHRvIHRoZSBvYnNlcnZhYmxlXG4gICAgICAgIHRoaXMuc2V0KCdkZXZpY2VJbmZvJywgZGV2aWNlSW5mbyk7XG4gICAgfVxuXG59Il19